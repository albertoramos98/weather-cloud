# CliMar - Aplicativo de Clima e Marés

## Resumo das Alterações Implementadas

### Nova Aba "Tábua por Mês"
- ✅ Adicionada nova aba com interface similar à aba "Clima"
- ✅ Mapa funcional com clique para seleção de localização
- ✅ Campo de digitação para busca por cidade
- ✅ Gráfico mensal de marés usando Chart.js
- ✅ Exibição de dados de maré alta e baixa por dia do mês

### Sistema de Alertas de Alagamento
- ✅ Análise cruzada de dados climáticos e de maré
- ✅ Três níveis de alerta: Baixo, Médio e Alto
- ✅ Exibição visual dos alertas na aba "Clima"
- ✅ Critérios baseados em chuva, maré alta crítica e combinação de fatores

## Como Executar o Aplicativo

### Pré-requisitos
- Python 3.11+
- Flask
- Requests
- Outras dependências listadas no código

### Passos para Execução

1. **Navegue até o diretório do projeto:**
   ```bash
   cd weather-cloud
   ```

2. **Execute o aplicativo Flask:**
   ```bash
   python app.py
   ```

3. **Acesse no navegador:**
   ```
   http://localhost:5000
   ```

### Funcionalidades Disponíveis

#### Aba Clima
- Busca por cidade ou clique no mapa
- Exibição de dados meteorológicos completos
- Dados de maré para cidades litorâneas
- **NOVO:** Alertas de alagamento baseados em análise de risco

#### Aba Marés
- Consulta específica de marés por porto e data
- Interface de pergunta em linguagem natural

#### Aba Tábua por Mês (NOVA)
- Busca por cidade ou clique no mapa
- Gráfico interativo com dados mensais de maré
- Visualização de marés altas e baixas por dia
- Interface responsiva e intuitiva

## Detalhes Técnicos das Implementações

### Backend (app.py)
- **Nova rota `/tabua_mes`:** Processa dados de maré mensais
- **Nova rota `/alertas_alagamento`:** Analisa risco de alagamento
- **Função `analisar_risco_alagamento`:** Cruza dados climáticos e de maré

### Frontend (templates/index.html)
- **Nova aba:** Interface completa para tábua mensal
- **Gráfico Chart.js:** Visualização interativa de dados
- **Sistema de alertas:** Exibição visual com cores e ícones
- **Mapa adicional:** Instância separada para a nova aba

### Critérios de Alerta de Alagamento

#### Risco Baixo
- Condições climáticas e de maré favoráveis
- Sem chuva significativa e maré normal

#### Risco Médio
- Presença de chuva OU maré alta crítica (>3.0m)
- Possibilidade de alagamentos localizados

#### Risco Alto
- Combinação de chuva intensa E maré alta crítica
- Alto potencial para alagamentos severos

## Estrutura dos Dados

### Resposta da API `/tabua_mes`
```json
{
  "cidade": "Nome da Cidade",
  "pais": "BR",
  "latitude": -3.7319,
  "longitude": -38.5267,
  "mes_extenso": "Junho",
  "ano": 2025,
  "mares_mensais": [
    {
      "dia": 1,
      "altura_max_alta": 2.5,
      "altura_min_baixa": 0.3
    }
  ]
}
```

### Resposta da API `/alertas_alagamento`
```json
{
  "nivel": "baixo|medio|alto",
  "alertas": [
    "Mensagem de alerta específica"
  ]
}
```

## Observações Importantes

1. **API Key:** Certifique-se de que a variável `API_KEY` está configurada com uma chave válida da OpenWeatherMap
2. **Dados de Maré:** O sistema utiliza o arquivo `banco_mareas.json` para dados de referência
3. **Responsividade:** A interface é totalmente responsiva e funciona em dispositivos móveis
4. **Performance:** Os mapas são carregados de forma independente para evitar conflitos

## Melhorias Futuras Sugeridas

- Integração com APIs de maré em tempo real
- Histórico de alertas de alagamento
- Notificações push para alertas críticos
- Exportação de dados em PDF/CSV
- Previsões de maré estendidas

## Tarefas para o Projeto CliMar

### Fase 1: Análise do código existente
- [x] Clonar o repositório do GitHub.
- [x] Listar o conteúdo do repositório para entender a estrutura.
- [x] Ler o arquivo `app.py` para entender as rotas e a lógica de backend.
- [x] Ler o arquivo `templates/index.html` para entender a estrutura do frontend e as interações.
- [x] Ler o arquivo `banco_mareas.json` para entender a estrutura dos dados de maré.

### Fase 2: Desenvolvimento da nova aba tábua por mês
- [x] Adicionar o botão da nova aba "Tábua por Mês" no `index.html`.
- [x] Adicionar a seção de conteúdo para a nova aba "Tábua por Mês" no `index.html`.
- [x] Adicionar a lógica JavaScript para a nova aba "Tábua por Mês" no `index.html` (mapa, formulário, exibição de resultados, gráfico).
- [x] Adicionar a nova rota `/tabua_mes` no `app.py` para obter os dados da tábua de marés mensal.
- [x] Implementar a lógica no `app.py` para processar os dados de maré e retornar o formato necessário para o gráfico mensal.
- [x] Adicionar a biblioteca Chart.js ao `index.html` para renderizar o gráfico.

### Fase 3: Sistema de alerta de alagamentos
- [x] Adicionar a rota `/alertas_alagamento` no `app.py`.
- [x] Implementar a função `analisar_risco_alagamento` no `app.py` que cruza dados de clima e maré.
- [x] Adicionar a chamada à API de alertas de alagamento no frontend e exibir o resultado.

### Fase 4: Teste e entrega
- [x] Testar todas as funcionalidades implementadas (aba clima, aba marés, aba tábua por mês, alertas de alagamento).
- [x] Garantir que o mapa e a digitação da cidade funcionam corretamente na nova aba.
- [x] Verificar se o gráfico de marés mensais é exibido corretamente.
- [x] Validar a precisão dos alertas de alagamento.
- [x] Fornecer instruções para o usuário sobre como executar o aplicativo.
- [x] Entregar o código final.

